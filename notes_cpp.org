* Introduction
This is a series of my own notes on C++.
I'm using =clang= as compiler on my windows machine.
Emacs is my editor of choice for editing C++ code with lsp-mode for IDE like features.
My main reference is the 2014 edition of Stroustrup excellent book "Programming principles and practice using C++"

This text is written in org-mode, a major mode of emacs, which enables editing text and running code in the same document.
I think this is ideal for an optimized learning experience since we can express ideas and concepts at same time we practice with the programming language.
* Hello world

#+BEGIN_SRC C++
#include <iostream>
using namespace std;		// avoid the need to write std::

int main(){
cout << "Hello World";
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
Hello World
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

* Declaring variables

Initialization gives a type and a value to a variable.
Assignment changes the value.

#+BEGIN_SRC C++
#include <iostream>

int main(){
    int x, y;
    x = 10;
    y = 2.1;			// not integer
    std::cout << x << " and " << y << " and ";
    float z;
    z = x / 3.;
    std::cout << z;
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
10 and 2 and 3.33333
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

* For Loops

Execute the body with i starting from 0 incrementing i after each execution until we reach 10.
Note that =++i= will increment the value of =i= and return that whereas =i++= will return the value of =i= then increment it.
This because =++= before is a pre increment and =++= after a post increment.

#+BEGIN_SRC C++ :results output pp
#include <iostream>
using namespace std;

int main(){
    for (int i=0; i<10; ++i){
	cout << i << '\t' << i * i << '\n';
    }
}
#+END_SRC

#+RESULTS:
#+begin_example
0	0
1	1
2	4
3	9
4	16
5	25
6	36
7	49
8	64
9	81
#+end_example

* Functions
*** Sintaxe
They have four parts:
1. return type (=int= for integer)
2. name (=main=)
3. parameter list in =()=
4. function body in ={}=

 
#+BEGIN_SRC C++
int main(){
    return 0;
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

*** Why use functions?

Each function should perform a *single action*. There are many advantages to that, namely:
1. Easier to test;
2. Easier to understand the code;
3. Easier to reuse code.

*** Difference between function definition and function declaration

A function definition is simply the function type, its identifier and its parameter list.

#+BEGIN_SRC C++
int func(int arg1);
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

This is usefull because we do not have to look at the function body (implementation), we just need to know how to use the function.
What are the functions arguments and what is the output?

* Vectors
*** How to initialize

Notes:
1. Index start at 0
2. When defining a vector we need to specify the type of its elements with =<int>.=
3. A vector accepts only element with the same type.
4. You *can not* refer to a nonexistent element of a vector.

#+BEGIN_SRC C++
#include<iostream>
#include<vector>
#include<string>
using namespace std;

int main(){ 
  vector<int> v = {5, 2, 0, 9};	// vector with 4 initial elements
  cout << v.size() << endl;
  vector<string> names(10);	// vector with predefined size
  cout << names.size();
    }
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
4
10
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

*** Traversing a vector

In order to print the vector we need to loop over its elements,

#+BEGIN_SRC C++
#include<iostream>
#include<vector>
#include<string>
using namespace std;

void printv(vector<int> v){
  for (int i=0; i<v.size(); ++i){
    cout << v[i] << endl;
  }
}
// range for loop
void printv2(vector<int> v){
  for (int i : v){		// a cleaner way of looping over array
    cout << v[i] << endl;	// for each i in v
  }
}

int main(){
  vector<int> v = {1, 3, 4, 5};
  printv(v);
  printv2(v);
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
1
3
4
5
3
5
0
0
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

*** Growing a vector

#+BEGIN_SRC C++ :results pp
#include<iostream>
#include<vector>
#include<string>
using namespace std;

double mean(vector<double> v){
  double sum=0;
  for (int x: v) sum += x;
  return sum / v.size();
}

int main(){
  vector<double> v={2., 3., 4., 5.2};
  for (int x : v) cout << x << ", ";
  cout << "The mean value: " << mean(v);
}
#+END_SRC

#+RESULTS:
: 2, 3, 4, 5, The mean value: 3.5

* Inputs

#+BEGIN_SRC C++
#include<iostream>
#include<string>
using namespace std;		// avoid the need to write std::

int main(){
    cout << "Type your name: ";
    string name;
    cin >> name;
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
Type your name:
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
#+END_SRC

* Switches

#+BEGIN_SRC C++ :cmdline 2
#include <iostream>	
#include <string>
using namespace std;

int main() {		
  char unit = 'a';
  double length = 1;
  cout << "Enter a length and unit (c or i): ";
  cin >> length >> unit;
  switch (unit) {
  case 'i':
    cout << length << "in";
    break; // each case must end with break
  case 'c':
    cout << length << "cm";
    break;
  default:
    cout << length << "sorry";
    break;
  }
}
#+END_SRC

#+RESULTS:
: Enter a length and unit (c or i): 1sorry

* Operations

Observations:
1. =sqrt()= comes from the standard library
2. for strings =+= means concatenation

#+BEGIN_SRC C++
#include <iostream>
#include <string>
using namespace std;
int main(){
    double n = 2.1;
    cout << n * n
    <<"\n" << n / n
    <<"\n" << sqrt(n);
    string name1 = "Nasser", name2 = "Alkmim";
    cout << "\n" << name1 << name2;
    cout << "\n" << name1 + name2;
}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC C++
4.41
1
1.44914
NasserAlkmim
NasserAlkmim
#+END_SRC

* OOP
*** Topics
1. data members
2. encapsulation, namespace, struct, nested types
3. constructors
4. aggregation and inheritance
5. pointer this
6. exceptions, throw, try, catch
*** Public and private
Public makes the functions avaible to main.
* Test driven development
* Templates
*** Topics
1. what are templates
*** What are templates?
It is a C++ tool that allows the definition of functions and classes in which the data types are parameters.
*** Example
This example is from a paper "Using C++ templates to implement finite element classes" by Marco L. Bittencourt.
We can see that the function works for integers and floats.

#+BEGIN_SRC C++
#include<iostream>
using namespace std;
template<class Type>		// defines the template with a parameter defined 

Type min(Type a, Type b){
    return a < b ? a : b;
}

int main(){
    cout << min(10, 20);
    cout << min(10.0, 20.0);
    return 0;
}
 
#+END_SRC

#+RESULTS:
: 1010

* Questions and answers
*** What is a type? and an object? a value? a variable?
A type defines a set of:
1. possible values for an object
2. operation for an object

An object is some memory that holds a value of a given type.

A value is a set of bits in memory interprected according to type.

A variable is a names object.
*** What is a bit?
A unit of computer memory that can hold the value of 0 or 1.
*** What is #include?
It is a directive that instructs the computer to make a file available.
It includes external libraries, as if the content of the included files is inserted.
External libraries are called /header files/ and have the suffix =.h=.
*** What is the operator >>?
Is an input operation, "get from" and is sensitive to type.
*** what is std::cout?
It is the standard output stream, "see-out".
It comes from the iostream library which save us from having to directly deal with hardware input/output ports.
*** Is the =main= function required?
Yes, every C++ program must have a main function.
*** Why return 0?
In some Unix/Linux systems it uses the 0 as a form of checking weather the program executed correctly.
*** What is a compile-time error?
An error fund by the compiler.
*** What is an object? and a variable?
It is a region of the memory with a /type/ which specifies the information that can be placed in it.
A variable is a named object.
*** Whats is the difference between Initialization and assignment?
Initialization gives a variable an initial value whereas assignment gives a variable a new value.
*** Why should you always initializa a variable?
In order to avoid problems such as using a variable beforce it is initialized.
Using a variable before it has been initialized is no type-safe.
*** What does =++var= do?
Increments the variable value by 1, same as =var = var + 1=.
